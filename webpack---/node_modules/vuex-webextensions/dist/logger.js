"use strict";
Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports["default"] = void 0;

function _classCallCheck(a, b) {
    if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function")
}

function _defineProperties(a, b) {
    for (var c, d = 0; d < b.length; d++) c = b[d], c.enumerable = c.enumerable || !1, c.configurable = !0, "value" in c && (c.writable = !0), Object.defineProperty(a, c.key, c)
}

function _createClass(a, b, c) {
    return b && _defineProperties(a.prototype, b), c && _defineProperties(a, c), a
}
var Logger = function() {
        function a() {
            return _classCallCheck(this, a), a.instance || (this.loggerLevel = "warning", this.levels = ["verbose", "debug", "info", "warning", "error", "none"], a.instance = this), a.instance
        }
        return _createClass(a, [{
            key: "setLoggerLevel",
            value: function setLoggerLevel(a) {
                this.loggerLevel = a
            }
        }, {
            key: "shouldLog",
            value: function shouldLog(a) {
                return this.levels.indexOf(a) >= this.levels.indexOf(this.loggerLevel)
            }
        }, {
            key: "verbose",
            value: function verbose(a) {
                this.printMessage("verbose", a)
            }
        }, {
            key: "debug",
            value: function debug(a) {
                this.printMessage("debug", a)
            }
        }, {
            key: "info",
            value: function info(a) {
                this.printMessage("info", a)
            }
        }, {
            key: "warning",
            value: function warning(a) {
                this.printMessage("warning", a)
            }
        }, {
            key: "error",
            value: function error(a) {
                this.printMessage("error", a)
            }
        }, {
            key: "printMessage",
            value: function printMessage(a, b) {
                if (this.shouldLog(a)) {
                    var c = a.charAt(0).toUpperCase() + a.slice(1),
                        d = "[".concat(c, "] Vuex WebExtensions: ").concat(b);
                    "error" == a ? console.error(d) : "warning" == a ? console.warn(d) : "info" == a ? console.info(d) : console.log(d)
                }
            }
        }]), a
    }(),
    instance = new Logger,
    _default = instance;
exports["default"] = _default;