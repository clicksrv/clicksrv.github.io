"use strict";
var _logger = _interopRequireDefault(require("./logger"));
Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports["default"] = void 0;

function _interopRequireDefault(a) {
    return a && a.__esModule ? a : {
        default: a
    }
}

function _classCallCheck(a, b) {
    if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function")
}

function _defineProperties(a, b) {
    for (var c, d = 0; d < b.length; d++) c = b[d], c.enumerable = c.enumerable || !1, c.configurable = !0, "value" in c && (c.writable = !0), Object.defineProperty(a, c.key, c)
}

function _createClass(a, b, c) {
    return b && _defineProperties(a.prototype, b), c && _defineProperties(a, c), a
}
var browsers = Object.freeze({
        firefox: {
            name: "Mozilla Firefox",
            namespace: "browser",
            type: "promise"
        },
        chrome: {
            name: "Google Chrome",
            namespace: "chrome",
            type: "callback"
        },
        edge: {
            name: "Microsoft Edge",
            namespace: "browser",
            type: "callback"
        }
    }),
    Browser = function() {
        function a() {
            _classCallCheck(this, a), this.browser = null, this.detectBrowser()
        }
        return _createClass(a, [{
            key: "detectBrowser",
            value: function detectBrowser() {
                return "undefined" == typeof chrome ? void(this.browser = browsers.edge) : "undefined" == typeof browser ? void(this.browser = browsers.chrome) : void(this.browser = browsers.firefox)
            }
        }, {
            key: "isBackgroundScript",
            value: function isBackgroundScript(a) {
                var b = this;
                return new Promise(function(c) {
                    try {
                        b.browser == browsers.chrome ? chrome.runtime.getBackgroundPage(function(b) {
                            return c(a === b)
                        }) : b.browser == browsers.firefox ? browser.runtime.getBackgroundPage().then(function(b) {
                            return c(a === b)
                        }) : b.browser == browsers.edge && browser.runtime.getBackgroundPage(function(b) {
                            return c(a === b)
                        })
                    } catch (a) {
                        return c(!1)
                    }
                    return !1
                })
            }
        }, {
            key: "getPersistentStates",
            value: function getPersistentStates() {
                var a = this;
                return new Promise(function(b, c) {
                    try {
                        a.browser == browsers.chrome ? chrome.storage.local.get("@@vwe-persistence", function(a) {
                            return a["@@vwe-persistence"] ? b(a["@@vwe-persistence"]) : b(null)
                        }) : a.browser == browsers.firefox ? browser.storage.local.get("@@vwe-persistence").then(function(a) {
                            return a["@@vwe-persistence"] ? b(a["@@vwe-persistence"]) : b(null)
                        }) : a.browser == browsers.edge && browser.storage.local.get("@@vwe-persistence", function(a) {
                            return a["@@vwe-persistence"] ? b(a["@@vwe-persistence"]) : b(null)
                        })
                    } catch (a) {
                        return c(a)
                    }
                    return !1
                })
            }
        }, {
            key: "savePersistentStates",
            value: function savePersistentStates(a) {
                if (this.browser == browsers.chrome) try {
                    chrome.storage.local.set({
                        "@@vwe-persistence": a
                    })
                } catch (a) {
                    _logger["default"].error("Can't write persistent states to local storage. Did you grant storage permission to your WebExtension?")
                } else if (this.browser == browsers.firefox) try {
                    browser.storage.local.set({
                        "@@vwe-persistence": a
                    })
                } catch (a) {
                    _logger["default"].error("Can't write persistent states to local storage. Did you grant storage permission to your WebExtension?")
                } else if (this.browser == browsers.edge) try {
                    browser.storage.local.set({
                        "@@vwe-persistence": a
                    })
                } catch (a) {
                    _logger["default"].error("Can't write persistent states to local storage. Did you grant storage permission to your WebExtension?")
                }
            }
        }, {
            key: "handleConnection",
            value: function handleConnection(a) {
                return this.browser == browsers.chrome ? chrome.runtime.onConnect.addListener(a) : browser.runtime.onConnect.addListener(a)
            }
        }, {
            key: "connectToBackground",
            value: function connectToBackground(a) {
                return this.browser == browsers.chrome ? chrome.runtime.connect({
                    name: a
                }) : browser.runtime.connect({
                    name: a
                })
            }
        }]), a
    }(),
    _default = Browser;
exports["default"] = _default;