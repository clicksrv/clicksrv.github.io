/* html-dir-content v0.3.2 (c) 2020, Yoav Niran, https://github.com/yoavniran/html-dir-content.git/blob/master/LICENSE */
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
        typeof define === 'function' && define.amd ? define(['exports'], factory) :
        (global = global || self, factory(global.htmlDirContent = {}));
}(this, (function(exports) {
    'use strict';

    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }

        return obj;
    }

    var OPTS_SYM = "opts_init",
        //not using Symbol to avoid polyfill
        BAIL_LEVEL = 1000,
        arrayConcat = Array.prototype.concat;

    var initOptions = function initOptions(options) {
        var _ref;

        return options[OPTS_SYM] === true ? options : (_ref = {}, _defineProperty(_ref, OPTS_SYM, true), _defineProperty(_ref, "recursive", options === true || !!options.recursive), _defineProperty(_ref, "withFullPath", !!options.withFullPath), _defineProperty(_ref, "bail", options.bail && options.bail > 0 ? options.bail : BAIL_LEVEL), _ref);
    };

    var getFileWithFullPath = function getFileWithFullPath(file, fullPath) {
        var newFile = new File([file], fullPath, {
            type: file.type,
            lastModified: file.lastModified
        }); //we add "hdcFullPath" prop because firefox converts the path "/" delimiter into ":"

        newFile.hdcFullPath = fullPath;
        return newFile;
    };

    var getFile = function getFile(file, fullPath) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return options.withFullPath ? getFileWithFullPath(file, fullPath) : file;
    };

    var getFileFromFileEntry = function getFileFromFileEntry(entry, options) {
        return new Promise(function(resolve, reject) {
            if (entry.file) {
                entry.file(function(file) {
                    return resolve(getFile(file, entry.fullPath, options));
                }, reject);
            } else {
                resolve(null);
            }
        })["catch"](function() {
            //swallow errors
            return null;
        });
    };

    var isItemFileEntry = function isItemFileEntry(item) {
        return item.kind === "file";
    };

    var getAsEntry = function getAsEntry(item) {
        return item.getAsEntry ? item.getAsEntry() : item.webkitGetAsEntry ? item.webkitGetAsEntry() : null;
    };

    var getListAsArray = function getListAsArray(list) {
        return ( //returns a flat array
            arrayConcat.apply([], list)
        );
    };

    var getEntryData = function getEntryData(entry, options, level) {
        var promise;

        if (entry.isDirectory) {
            promise = options.recursive ? getFileList(entry, options, level + 1) : Promise.resolve([]);
        } else {
            promise = getFileFromFileEntry(entry, options).then(function(file) {
                return file ? [file] : [];
            });
        }

        return promise;
    };
    /**
     * returns a flat list of files for root dir item
     * if recursive is true will get all files from sub folders
     */


    var getFileList = function getFileList(root, options) {
        var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        return root && level < options.bail && root.isDirectory && root.createReader ? new Promise(function(resolve) {
            var allEntries = [];
            var reader = root.createReader();

            var createResults = function createResults() {
                Promise.all(allEntries.map(function(entry) {
                    return getEntryData(entry, options, level);
                })).then(function(results) {
                    return resolve(getListAsArray(results));
                }); //flatten the results
            };

            var readEntries = function readEntries() {
                reader.readEntries(function(entries) {
                    if (entries.length) {
                        allEntries = allEntries.concat(entries);
                        readEntries();
                    } else {
                        createResults();
                    }
                }, createResults); //fail silently
            };

            readEntries();
        }) : Promise.resolve([]);
    };

    /**
     * returns a Promise<Array<File>> of File objects for the provided item if it represents a directory
     * will attempt to retrieve all of its children files (optionally recursively)
     * @param item: DataTransferItem
     * @param options (optional)
     *  {options.recursive} (default: false) - whether to recursively follow the dir structure
     *  {options.withFullPath} (default: false) - whether to include the full path in the file entry
     *  {options.bail} (default: 1000) - how many levels to follow recursively before bailing
     */

    var getFiles = function getFiles(item) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return getFileList(getAsEntry(item), initOptions(options));
    };

    var getDataTransferItemFiles = function getDataTransferItemFiles(item, options) {
        return getFiles(item, options).then(function(files) {
            if (!files.length) {
                //perhaps its a regular file
                var file = item.getAsFile();
                files = file ? [file] : files;
            }

            return files;
        });
    };
    /**
     * returns a Promise<Array<File>> for the File objects found in the dataTransfer data of a drag&drop event
     * In case a directory is found, will attempt to retrieve all of its children files (optionally recursively)
     *
     * @param evt: DragEvent - containing dataTransfer
     * @param options (optional)
     *  {options.recursive} (default: false) - whether to recursively follow the dir structure
     *  {options.withFullPath} (default: false) - whether to include the full path in the file entry
     *  {options.bail} (default: 1000) - how many levels to follow recursively before bailing
     */


    var getFilesFromDragEvent = function getFilesFromDragEvent(evt) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        options = initOptions(options);
        return new Promise(function(resolve) {
            if (evt.dataTransfer.items) {
                Promise.all(getListAsArray(evt.dataTransfer.items).filter(function(item) {
                    return isItemFileEntry(item);
                }).map(function(item) {
                    return getDataTransferItemFiles(item, options);
                })).then(function(files) {
                    return resolve(getListAsArray(files));
                });
            } else if (evt.dataTransfer.files) {
                resolve(getListAsArray(evt.dataTransfer.files)); //turn into regular array (instead of FileList)
            } else {
                resolve([]);
            }
        });
    };

    exports.getFiles = getFiles;
    exports.getFilesFromDragEvent = getFilesFromDragEvent;

    Object.defineProperty(exports, '__esModule', {
        value: true
    });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,