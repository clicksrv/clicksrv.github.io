'use strict';

var normalizeKeypath = require('../utilities/normalize_keypath');
var get = require('../utilities/get');

var fallbacks = {};

fallbacks['$eq'] = binaryOperator(function(a, b) {
    return a === b;
});
fallbacks['$ne'] = binaryOperator(function(a, b) {
    return a !== b;
});
fallbacks['$lt'] = binaryOperator(function(a, b) {
    return a < b;
});
fallbacks['$gt'] = binaryOperator(function(a, b) {
    return a > b;
});
fallbacks['$lte'] = binaryOperator(function(a, b) {
    return a <= b;
});
fallbacks['$gte'] = binaryOperator(function(a, b) {
    return a >= b;
});
fallbacks['$mod'] = binaryOperator(function(a, b) {
    return a % b[0] === b[1];
});
fallbacks['$where'] = binaryOperator(function(a, b, key) {
    return b(a, key);
});
fallbacks['$size'] = binaryOperator(function(a, b, key) {
    return a.length === b;
});

function binaryOperator(fn) {
    return function(_ref) {
        var key = _ref.key;
        var value = _ref.value;

        key = normalizeKeypath(key);
        return function(item, _key) {
            return fn(get(item, key), value, _key);
        };
    };
}

fallbacks['$or'] = function(_ref2, build) {
    var key = _ref2.key;
    var value = _ref2.value;

    var fns = value.map(build);

    return function(item, key) {
        for (var i = 0, len = fns.length; i < len; i++) {
            if (fns[i](item, key)) return true;
        }
        return false;
    };
};

fallbacks['$and'] = function(_ref3, build) {
    var key = _ref3.key;
    var value = _ref3.value;

    var fns = value.map(build);

    return function(item, key) {
        for (var i = 0, len = fns.length; i < len; i++) {
            if (!fns[i](item, key)) return false;
        }
        return true;
    };
};

fallbacks['$in'] = function(_ref4, build) {
    var key = _ref4.key;
    var value = _ref4.value;

    return build({
        type: '$or',
        value: value.map(function(value) {
            return {
                type: '$eq',
                key: key,
                value: value
            };
        })
    });
};

fallbacks['$nor'] = function(_ref5, build) {
    var key = _ref5.key;
    var value = _ref5.value;

    var fns = value.map(build);

    return function(item, key) {
        for (var i = 0, len = fns.length; i < len; i++) {
            if (fns[i](item, key)) return false;
        }
        return true;
    };
};

fallbacks['$not'] = function(_ref6, build) {
    var key = _ref6.key;
    var value = _ref6.value;

    var fn = build(value);
    return function(item, _key) {
        return !fn(item, _key);
    };
};

fallbacks['$nin'] = function(_ref7, build) {
    var key = _ref7.key;
    var value = _ref7.value;

    return build({
        type: '$and',
        value: value.map(function(value) {
            return {
                type: '$ne',
                key: key,
                value: value
            };
        })
    });
};

fallbacks['$regex'] = function(_ref8) {
    var key = _ref8.key;
    var value = _ref8.value;

    key = normalizeKeypath(key);
    return function(item, _key) {
        return value.test(get(item, key));
    };
};

fallbacks['$exists'] = function(_ref9) {
    var key = _ref9.key;
    var value = _ref9.value;

    key = normalizeKeypath(key);
    if (value) return function(item, _key) {
        return get(item, key) != null;
    };
    else return function(item, _key) {
        return get(item, key) == null;
    };
};

module.exports = fallbacks;