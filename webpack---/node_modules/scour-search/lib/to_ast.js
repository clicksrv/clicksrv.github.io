'use strict';

function _typeof(obj) {
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}

var operands = require('./operands');
var fallbacks = require('./fallbacks');

/*
 * Converts a MongoDB-style query to an AST (abstract syntax tree) that's
 * faster to search with.
 *
 *     toAST({ name: 'john' })
 *     { type: '$eq', key: 'name', value: 'john' }
 *
 *     toAST({ name: { $in: [ 'john', 'joe' ] })
 *     { type: '$or', value:
 *       [ { type: '$eq', key: 'name', value: 'john' },
 *         { type: '$eq', key: 'name', value: 'john' } ] }
 */

module.exports = function toAST(condition, prefix) {
    if ((typeof condition === 'undefined' ? 'undefined' : _typeof(condition)) !== 'object') {
        return {
            type: '$eq',
            key: prefix,
            value: condition
        };
    }
    if (Array.isArray(condition)) {
        return condition.map(function(condition) {
            return toAST(condition, prefix);
        });
    }

    var keys = Object.keys(condition);

    if (keys.length === 1) {
        var operand = operands[keys[0]] || fallbacks[keys[0]];
        var value = condition[keys[0]];

        if (operand && operand.unary) {
            return {
                type: keys[0],
                key: prefix,
                value: toAST(value, prefix)
            };
        } else if (operand) {
            return {
                type: keys[0],
                key: prefix,
                value: condition[keys[0]]
            };
        }
    }

    var conditions = keys.map(function(key) {
        return toAST(condition[key], prefix ? prefix + '.' + key : key);
    });

    return conditions.length === 1 ? conditions[0] : {
        type: '$and',
        value: conditions
    };
};